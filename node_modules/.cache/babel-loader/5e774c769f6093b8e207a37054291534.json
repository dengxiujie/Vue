{"remainingRequest":"C:\\Users\\ma\\Desktop\\vue\\vue-item\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ma\\Desktop\\vue\\vue-item\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\ma\\Desktop\\vue\\vue-item\\src\\http\\axios.js","dependencies":[{"path":"C:\\Users\\ma\\Desktop\\vue\\vue-item\\src\\http\\axios.js","mtime":1570942682765},{"path":"C:\\Users\\ma\\Desktop\\vue\\vue-item\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ma\\Desktop\\vue\\vue-item\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\ma\\Desktop\\vue\\vue-item\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport config from \"./config\";\nimport Cookies from \"js-cookie\";\nimport router from '@/router'; // 使用vuex做全局loading时使用\n// import store from '@/store'\n\nexport default function $axios(options) {\n  var _this = this;\n\n  return new Promise(function (resolve, reject) {\n    var instance = axios.create({\n      baseURL: config.baseUrl,\n      headers: config.headers,\n      timeout: config.timeout,\n      withCredentials: config.withCredentials\n    }); // request 拦截器\n\n    instance.interceptors.request.use(function (config) {\n      var token = Cookies.get('token'); // 1. 请求开始的时候可以结合 vuex 开启全屏 loading 动画\n      // console.log(store.state.loading)\n      // console.log('准备发送请求...')\n      // 2. 带上token\n\n      if (token) {\n        config.headers.token = token;\n      } else {\n        // 重定向到登录页面\n        router.push('/login');\n      } // 3. 根据请求方法，序列化传来的参数，根据后端需求是否序列化\n\n\n      if (config.method === 'post') {// if (config.data.__proto__ === FormData.prototype\n        //   || config.url.endsWith('path')\n        //   || config.url.endsWith('mark')\n        //   || config.url.endsWith('patchs')\n        // ) {\n        // } else {\n        // config.data = qs.stringify(config.data)\n        // }\n      }\n\n      return config;\n    }, function (error) {\n      // 请求错误时\n      _this.$message({\n        message: \"request\",\n        type: \"error\",\n        showClose: true\n      }); // 1. 判断请求超时\n\n\n      if (error.code === 'ECONNABORTED' && error.message.indexOf('timeout') !== -1) {\n        _this.$message({\n          message: 'timeout请求超时',\n          type: \"error\",\n          showClose: true\n        }); // return service.request(originalRequest);// 再重复请求一次\n\n      } // 2. 需要重定向到错误页面\n\n\n      var errorInfo = error.response;\n\n      if (errorInfo) {\n        error = errorInfo.data; // 页面那边catch的时候就能拿到详细的错误信息,看最下边的Promise.reject\n\n        var errorStatus = errorInfo.status; // 404 403 500 ...\n\n        router.push({\n          path: \"/error/\".concat(errorStatus)\n        });\n      }\n\n      return Promise.reject(error); // 在调用的那边可以拿到(catch)你想返回的错误信息\n    }); // response 拦截器\n\n    instance.interceptors.response.use(function (response) {\n      var data; // IE9时response.data是undefined，因此需要使用response.request.responseText(Stringify后的字符串)\n\n      if (response.data == undefined) {\n        data = JSON.parse(response.request.responseText);\n      } else {\n        data = response.data;\n      } // 根据返回的code值来做不同的处理\n\n\n      switch (data.rc) {\n        case 1:\n          alert(data.desc);\n          break;\n\n        case 0:\n          alert('changeState');\n\n        default:\n      } // 若不是正确的返回code，且已经登录，就抛出错误\n      // const err = new Error(data.desc)\n      // err.data = data\n      // err.response = response\n      // throw err\n\n\n      return data;\n    }, function (err) {\n      if (err && err.response) {\n        switch (err.response.status) {\n          case 400:\n            err.message = '请求错误';\n            break;\n\n          case 401:\n            err.message = '未授权，请登录';\n            break;\n\n          case 403:\n            err.message = '拒绝访问';\n            break;\n\n          case 404:\n            err.message = \"\\u8BF7\\u6C42\\u5730\\u5740\\u51FA\\u9519: \".concat(err.response.config.url);\n            break;\n\n          case 408:\n            err.message = '请求超时';\n            break;\n\n          case 500:\n            err.message = '服务器内部错误';\n            break;\n\n          case 501:\n            err.message = '服务未实现';\n            break;\n\n          case 502:\n            err.message = '网关错误';\n            break;\n\n          case 503:\n            err.message = '服务不可用';\n            break;\n\n          case 504:\n            err.message = '网关超时';\n            break;\n\n          case 505:\n            err.message = 'HTTP版本不受支持';\n            break;\n\n          default:\n        }\n      }\n\n      return Promise.reject(err); // 返回接口返回的错误信息\n    }); // 请求处理\n\n    instance(options).then(function (res) {\n      resolve(res);\n      return false;\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}",{"version":3,"sources":["C:/Users/ma/Desktop/vue/vue-item/src/http/axios.js"],"names":["axios","config","Cookies","router","$axios","options","Promise","resolve","reject","instance","create","baseURL","baseUrl","headers","timeout","withCredentials","interceptors","request","use","token","get","push","method","error","$message","message","type","showClose","code","indexOf","errorInfo","response","data","errorStatus","status","path","undefined","JSON","parse","responseText","rc","alert","desc","err","url","then","res","catch"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport config from './config';\nimport Cookies from \"js-cookie\";\nimport router from '@/router'\n\n// 使用vuex做全局loading时使用\n// import store from '@/store'\n\nexport default function $axios(options) {\n  return new Promise((resolve, reject) => {\n    const instance = axios.create({\n      baseURL: config.baseUrl,\n      headers: config.headers,\n      timeout: config.timeout,\n      withCredentials: config.withCredentials\n    })\n\n    // request 拦截器\n    instance.interceptors.request.use(\n      config => {\n        let token = Cookies.get('token')\n        // 1. 请求开始的时候可以结合 vuex 开启全屏 loading 动画\n        // console.log(store.state.loading)\n        // console.log('准备发送请求...')\n        // 2. 带上token\n        if (token) {\n          config.headers.token = token\n        } else {\n          // 重定向到登录页面\n          router.push('/login')\n        }\n        // 3. 根据请求方法，序列化传来的参数，根据后端需求是否序列化\n        if (config.method === 'post') {\n          // if (config.data.__proto__ === FormData.prototype\n          //   || config.url.endsWith('path')\n          //   || config.url.endsWith('mark')\n          //   || config.url.endsWith('patchs')\n          // ) {\n\n          // } else {\n            // config.data = qs.stringify(config.data)\n          // }\n        }\n\n        return config\n      },\n\n      error => {\n        // 请求错误时\n        this.$message({\n          message:\"request\",\n          type:\"error\",\n          showClose:true,\n        })\n        // 1. 判断请求超时\n        if (error.code === 'ECONNABORTED' && error.message.indexOf('timeout') !== -1) {\n          this.$message({message:'timeout请求超时',type:\"error\",showClose:true})\n          // return service.request(originalRequest);// 再重复请求一次\n        }\n        // 2. 需要重定向到错误页面\n        const errorInfo = error.response\n        if (errorInfo) {\n          error = errorInfo.data  // 页面那边catch的时候就能拿到详细的错误信息,看最下边的Promise.reject\n          const errorStatus = errorInfo.status; // 404 403 500 ...\n          router.push({\n            path: `/error/${errorStatus}`\n          })\n        }\n        return Promise.reject(error) // 在调用的那边可以拿到(catch)你想返回的错误信息\n      }\n    )\n\n    // response 拦截器\n    instance.interceptors.response.use(\n      response => {\n        let data;\n        // IE9时response.data是undefined，因此需要使用response.request.responseText(Stringify后的字符串)\n        if (response.data == undefined) {\n          data = JSON.parse(response.request.responseText)\n        } else {\n          data = response.data\n        }\n\n        // 根据返回的code值来做不同的处理\n        switch (data.rc) {\n          case 1:\n            alert(data.desc)\n            break;\n          case 0:\n          alert('changeState')\n          default: \n        }\n        // 若不是正确的返回code，且已经登录，就抛出错误\n        // const err = new Error(data.desc)\n        // err.data = data\n        // err.response = response\n        // throw err\n\n        return data\n      },\n      err => {\n        if (err && err.response) {\n          switch (err.response.status) {\n            case 400:\n              err.message = '请求错误'\n              break\n            case 401:\n              err.message = '未授权，请登录'\n              break\n            case 403:\n              err.message = '拒绝访问'\n              break\n            case 404:\n              err.message = `请求地址出错: ${err.response.config.url}`\n              break\n            case 408:\n              err.message = '请求超时'\n              break\n            case 500:\n              err.message = '服务器内部错误'\n              break\n            case 501:\n              err.message = '服务未实现'\n              break\n            case 502:\n              err.message = '网关错误'\n              break\n            case 503:\n              err.message = '服务不可用'\n              break\n            case 504:\n              err.message = '网关超时'\n              break\n            case 505:\n              err.message = 'HTTP版本不受支持'\n              break\n            default:\n          }\n        }\n        return Promise.reject(err) // 返回接口返回的错误信息\n      }\n    )\n\n    // 请求处理\n    instance(options).then(res => {\n      resolve(res)\n      return false\n    }).catch(error => {\n      reject(error)\n    })\n  })\n}"]}]}