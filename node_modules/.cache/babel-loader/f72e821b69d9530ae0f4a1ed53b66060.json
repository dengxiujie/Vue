{"remainingRequest":"C:\\Users\\ma\\Desktop\\vue\\vue-item\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ma\\Desktop\\vue\\vue-item\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\ma\\Desktop\\vue\\vue-item\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ma\\Desktop\\vue\\vue-item\\src\\components\\ThemePicker\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\ma\\Desktop\\vue\\vue-item\\src\\components\\ThemePicker\\index.vue","mtime":1570871177000},{"path":"C:\\Users\\ma\\Desktop\\vue\\vue-item\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ma\\Desktop\\vue\\vue-item\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\ma\\Desktop\\vue\\vue-item\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ma\\Desktop\\vue\\vue-item\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.replace\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\n\nvar version = require('element-ui/package.json').version; // element-ui version from node_modules\n\n\nvar ORIGINAL_THEME = '#409EFF'; // default color\n\nexport default {\n  name: 'ThemePicker',\n  props: {\n    default: {\n      // 初始化主题，可由外部传入\n      type: String,\n      default: null\n    },\n    size: {\n      // 初始化主题，可由外部传入\n      type: String,\n      default: 'small'\n    }\n  },\n  data: function data() {\n    return {\n      chalk: '',\n      // content of theme-chalk css\n      theme: ORIGINAL_THEME,\n      showSuccess: true // 是否弹出换肤成功消息\n\n    };\n  },\n  mounted: function mounted() {\n    if (this.default != null) {\n      this.theme = this.default;\n      this.$emit('onThemeChange', this.theme);\n      this.showSuccess = false;\n    }\n  },\n  watch: {\n    theme: function theme(val, oldVal) {\n      var _this = this;\n\n      if (typeof val !== 'string') return;\n      var themeCluster = this.getThemeCluster(val.replace('#', ''));\n      var originalCluster = this.getThemeCluster(oldVal.replace('#', ''));\n      console.log(themeCluster, originalCluster);\n\n      var getHandler = function getHandler(variable, id) {\n        return function () {\n          var originalCluster = _this.getThemeCluster(ORIGINAL_THEME.replace('#', ''));\n\n          var newStyle = _this.updateStyle(_this[variable], originalCluster, themeCluster);\n\n          var styleTag = document.getElementById(id);\n\n          if (!styleTag) {\n            styleTag = document.createElement('style');\n            styleTag.setAttribute('id', id);\n            document.head.appendChild(styleTag);\n          }\n\n          styleTag.innerText = newStyle;\n        };\n      };\n\n      var chalkHandler = getHandler('chalk', 'chalk-style');\n\n      if (!this.chalk) {\n        var url = \"https://unpkg.com/element-ui@\".concat(version, \"/lib/theme-chalk/index.css\");\n        this.getCSSString(url, chalkHandler, 'chalk');\n      } else {\n        chalkHandler();\n      }\n\n      var styles = [].slice.call(document.querySelectorAll('style')).filter(function (style) {\n        var text = style.innerText;\n        return new RegExp(oldVal, 'i').test(text) && !/Chalk Variables/.test(text);\n      });\n      styles.forEach(function (style) {\n        var innerText = style.innerText;\n        if (typeof innerText !== 'string') return;\n        style.innerText = _this.updateStyle(innerText, originalCluster, themeCluster);\n      }); // 响应外部操作\n\n      this.$emit('onThemeChange', val);\n\n      if (this.showSuccess) {\n        this.$message({\n          message: '换肤成功',\n          type: 'success',\n          showClose: true\n        }); // 切换主题\n\n        this.$store.commit('setThemeColor', val);\n      } else {\n        this.showSuccess = true;\n      }\n    }\n  },\n  methods: {\n    updateStyle: function updateStyle(style, oldCluster, newCluster) {\n      var newStyle = style;\n      oldCluster.forEach(function (color, index) {\n        newStyle = newStyle.replace(new RegExp(color, 'ig'), newCluster[index]);\n      });\n      return newStyle;\n    },\n    getCSSString: function getCSSString(url, callback, variable) {\n      var _this2 = this;\n\n      var xhr = new XMLHttpRequest();\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n          _this2[variable] = xhr.responseText.replace(/@font-face{[^}]+}/, '');\n          callback();\n        }\n      };\n\n      xhr.open('GET', url);\n      xhr.send();\n    },\n    //计算一系列theme值相关主题颜色\n    getThemeCluster: function getThemeCluster(theme) {\n      var tintColor = function tintColor(color, tint) {\n        var red = parseInt(color.slice(0, 2), 16);\n        var green = parseInt(color.slice(2, 4), 16);\n        var blue = parseInt(color.slice(4, 6), 16);\n\n        if (tint === 0) {\n          // when primary color is in its rgb space\n          return [red, green, blue].join(',');\n        } else {\n          red += Math.round(tint * (255 - red));\n          green += Math.round(tint * (255 - green));\n          blue += Math.round(tint * (255 - blue));\n          red = red.toString(16);\n          green = green.toString(16);\n          blue = blue.toString(16);\n          return \"#\".concat(red).concat(green).concat(blue);\n        }\n      };\n\n      var shadeColor = function shadeColor(color, shade) {\n        var red = parseInt(color.slice(0, 2), 16);\n        var green = parseInt(color.slice(2, 4), 16);\n        var blue = parseInt(color.slice(4, 6), 16);\n        red = Math.round((1 - shade) * red);\n        green = Math.round((1 - shade) * green);\n        blue = Math.round((1 - shade) * blue);\n        red = red.toString(16);\n        green = green.toString(16);\n        blue = blue.toString(16);\n        return \"#\".concat(red).concat(green).concat(blue);\n      };\n\n      var clusters = [theme];\n\n      for (var i = 0; i <= 9; i++) {\n        clusters.push(tintColor(theme, Number((i / 10).toFixed(2))));\n      }\n\n      clusters.push(shadeColor(theme, 0.1));\n      return clusters;\n    }\n  }\n};",{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <el-color-picker\n    class=\"theme-picker\"\n    popper-class=\"theme-picker-dropdown\"\n    v-model=\"theme\" \n    :size=\"size\">\n  </el-color-picker>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\nconst version = require('element-ui/package.json').version // element-ui version from node_modules\nconst ORIGINAL_THEME = '#409EFF' // default color\nexport default {\n  name: 'ThemePicker',\n  props: {\n    default: { // 初始化主题，可由外部传入\n      type: String,\n      default: null\n    },\n    size: { // 初始化主题，可由外部传入\n      type: String,\n      default: 'small'\n    }\n  },\n  data() {\n    return {\n      chalk: '', // content of theme-chalk css\n      theme: ORIGINAL_THEME,\n      showSuccess: true // 是否弹出换肤成功消息\n    }\n  },\n  mounted() {\n    if(this.default != null) {\n      this.theme = this.default\n      this.$emit('onThemeChange', this.theme)\n      this.showSuccess = false\n    }\n  },\n  watch: {\n    theme(val, oldVal) {\n      if (typeof val !== 'string') return\n      const themeCluster = this.getThemeCluster(val.replace('#', ''))\n      const originalCluster = this.getThemeCluster(oldVal.replace('#', ''))\n      console.log(themeCluster, originalCluster)\n      const getHandler = (variable, id) => {\n        return () => {\n          const originalCluster = this.getThemeCluster(ORIGINAL_THEME.replace('#', ''))\n          const newStyle = this.updateStyle(this[variable], originalCluster, themeCluster)\n\n          let styleTag = document.getElementById(id)\n          if (!styleTag) {\n            styleTag = document.createElement('style')\n            styleTag.setAttribute('id', id)\n            document.head.appendChild(styleTag)\n          }\n          styleTag.innerText = newStyle\n        }\n      }\n\n      const chalkHandler = getHandler('chalk', 'chalk-style')\n\n      if (!this.chalk) {\n        const url = `https://unpkg.com/element-ui@${version}/lib/theme-chalk/index.css`\n        this.getCSSString(url, chalkHandler, 'chalk')\n      } else {\n        chalkHandler()\n      }\n\n      const styles = [].slice.call(document.querySelectorAll('style'))\n        .filter(style => {\n          const text = style.innerText\n          return new RegExp(oldVal, 'i').test(text) && !/Chalk Variables/.test(text)\n        })\n      styles.forEach(style => {\n        const { innerText } = style\n        if (typeof innerText !== 'string') return\n        style.innerText = this.updateStyle(innerText, originalCluster, themeCluster)\n      })\n      \n      // 响应外部操作\n      this.$emit('onThemeChange', val)\n      if(this.showSuccess) {\n        this.$message({\n          message: '换肤成功',\n          type: 'success',\n          showClose:true,\n        })\n         // 切换主题\n      this.$store.commit('setThemeColor',val)\n      } else {\n        this.showSuccess = true\n      }\n    }\n  },\n  methods: {\n    updateStyle(style, oldCluster, newCluster) {\n      let newStyle = style\n      oldCluster.forEach((color, index) => {\n        newStyle = newStyle.replace(new RegExp(color, 'ig'), newCluster[index])\n      })\n      return newStyle\n    },\n    getCSSString(url, callback, variable) {\n      const xhr = new XMLHttpRequest()\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n          this[variable] = xhr.responseText.replace(/@font-face{[^}]+}/, '')\n          callback()\n        }\n      }\n      xhr.open('GET', url)\n      xhr.send()\n    },\n//计算一系列theme值相关主题颜色\n    getThemeCluster(theme) {\n      const tintColor = (color, tint) => {\n        let red = parseInt(color.slice(0, 2), 16)\n        let green = parseInt(color.slice(2, 4), 16)\n        let blue = parseInt(color.slice(4, 6), 16)\n\n        if (tint === 0) { // when primary color is in its rgb space\n          return [red, green, blue].join(',')\n        } else {\n          red += Math.round(tint * (255 - red))\n          green += Math.round(tint * (255 - green))\n          blue += Math.round(tint * (255 - blue))\n\n          red = red.toString(16)\n          green = green.toString(16)\n          blue = blue.toString(16)\n\n          return `#${red}${green}${blue}`\n        }\n      }\n\n      const shadeColor = (color, shade) => {\n        let red = parseInt(color.slice(0, 2), 16)\n        let green = parseInt(color.slice(2, 4), 16)\n        let blue = parseInt(color.slice(4, 6), 16)\n\n        red = Math.round((1 - shade) * red)\n        green = Math.round((1 - shade) * green)\n        blue = Math.round((1 - shade) * blue)\n\n        red = red.toString(16)\n        green = green.toString(16)\n        blue = blue.toString(16)\n\n        return `#${red}${green}${blue}`\n      }\n\n      const clusters = [theme]\n      for (let i = 0; i <= 9; i++) {\n        clusters.push(tintColor(theme, Number((i / 10).toFixed(2))))\n      }\n      clusters.push(shadeColor(theme, 0.1))\n      return clusters\n    }\n  }\n}\n</script>\n\n<style>\n.theme-picker .el-color-picker__trigger {\n  vertical-align: middle;\n}\n\n.theme-picker-dropdown .el-color-dropdown__link-btn {\n  display: none;\n}\n</style>"],"sourceRoot":"src/components/ThemePicker"}]}